#compdef ans

# print foo $ansmods foo

local ansmods
ansmods=(
  acl\\::'Sets and retrieves file ACL information.'
  add_host\\::'add a host (and alternatively a group) to the ansible-playb...'
  apache2_module\\::'enables/disables a module of the Apache2 webserver'
  apt\\::'Manages apt-packages'
  apt_key\\::'Add or remove an apt key'
  apt_repository\\::'Add and remove APT repositories'
  apt_rpm\\::'apt_rpm package manager'
  assemble\\::'Assembles a configuration file from fragments'
  assert\\::'Fail with custom message'
  at\\::'Schedule the execution of a command or script file via the ...'
  authorized_key\\::'Adds or removes an SSH authorized key'
  bzr\\::'Deploy software (or files) from bzr branches'
  capabilities\\::'Manage Linux capabilities'
  command\\::'Executes a command on a remote node'
  copy\\::'Copies files to remote locations.'
  cpanm\\::'Manages Perl library dependencies.'
  cron\\::'Manage cron.d and crontab entries.'
  debug\\::'Print statements during execution'
  docker\\::'manage docker containers'
  easy_install\\::'Installs Python libraries'
  facter\\::'Runs the discovery program facter on the remote system'
  fail\\::'Fail with custom message'
  fetch\\::'Fetches a file from remote nodes'
  file\\::'Sets attributes of files'
  filesystem\\::'Makes file system on block device'
  firewalld\\::'Manage arbitrary ports/services with firewalld'
  gem\\::'Manage Ruby gems'
  get_url\\::'Downloads files from HTTP, HTTPS, or FTP to node'
  getent\\::'a wrapper to the unix getent utility'
  git\\::'Deploy software (or files) from git checkouts'
  group\\::'Add or remove groups'
  hg\\::'Manages Mercurial (hg) repositories.'
  homebrew\\::'Package manager for Homebrew'
  hostname\\::'Manage hostname'
  htpasswd\\::'manage user files for basic authentication'
  include_vars\\::'Load variables from files, dynamically within a task.'
  ini_file\\::'Tweak settings in INI files'
  irc\\::'Send a message to an IRC channel'
  jabber\\::'Send a message to jabber user or chat room'
  lineinfile\\::'Ensure a particular line is in a file, or replace an existi...'
  macports\\::'Package manager for MacPorts'
  mail\\::'Send an email'
  modprobe\\::'Add or remove kernel modules'
  mongodb_user\\::'Adds or removes a user from a MongoDB database.'
  monit\\::'Manage the state of a program monitored via Monit'
  mount\\::'Control active and configured mount points'
  mysql_db\\::'Add or remove MySQL databases from a remote host.'
  mysql_replication\\::'Manage MySQL replication'
  mysql_user\\::'Adds or removes a user from a MySQL database.'
  mysql_variables\\::'Manage MySQL global variables'
  nagios\\::'Perform common tasks in Nagios related to downtime and noti...'
  npm\\::'Manage node.js packages with npm'
  ohai\\::'Returns inventory data from Ohai'
  openbsd_pkg\\::'Manage packages on OpenBSD.'
  pacman\\::'Manage packages with pacman'
  pause\\::'Pause playbook execution'
  ping\\::'Try to connect to host and return pong on success.'
  pingdom\\::'Pause/unpause Pingdom alerts'
  pip\\::'Manages Python library dependencies.'
  pkgin\\::'Package manager for SmartOS'
  pkgng\\::'Package manager for FreeBSD >= 9.0'
  pkgutil\\::'Manage CSW-Packages on Solaris'
  portage\\::'Package manager for Gentoo'
  portinstall\\::'Installing packages from FreeBSD ports system'
  postgresql_db\\::'Add or remove PostgreSQL databases from a remote host.'
  postgresql_privs\\::'Grant or revoke privileges on PostgreSQL database objects.'
  postgresql_user\\::'Adds or removes a users (roles) from a PostgreSQL database.'
  rabbitmq_parameter\\::'Adds or removes parameters to RabbitMQ'
  raw\\::'Executes a low-down and dirty SSH command'
  redis\\::'Various redis commands, slave and flush'
  replace\\::'Replace all instances of a particular string in a file usin...'
  riak\\::'This module handles some common Riak operations'
  route53\\::'add or delete entries in Amazons Route53 DNS service'
  s3\\::'S3 module putting a file into S3.'
  script\\::'Runs a local script on a remote node after transferring it'
  seboolean\\::'Toggles SELinux booleans.'
  selinux\\::'Change policy and state of SELinux'
  service\\::'Manage services.'
  set_fact\\::'Set host facts from a task'
  setup\\::'Gathers facts about remote hosts'
  shell\\::'Execute commands in nodes.'
  slack\\::'Send Slack notifications'
  slurp\\::'Slurps a file from remote nodes'
  sns\\::'Send Amazon Simple Notification Service (SNS) messages'
  stat\\::'retrieve file or file system status'
  subversion\\::'Deploys a subversion repository.'
  supervisorctl\\::'Manage the state of a program or group of programs running ...'
  synchronize\\::'Uses rsync to make synchronizing file paths in your playboo...'
  sysctl\\::'Manage entries in sysctl.conf.'
  template\\::'Templates a file out to a remote server.'
  unarchive\\::'Copies an archive to a remote location and unpack it'
  uri\\::'Interacts with webservices'
  user\\::'Manage user accounts'
  virt\\::'Manages virtual machines supported by libvirt'
  wait_for\\::'Waits for a condition before continuing.'
  xattr\\::'set/retrieve extended attributes'
  yum\\::'Manages packages with the yum package manager'
  zfs\\::'Manage zfs'
  zypper\\::'Manage packages on SUSE and openSUSE'
  zypper_repository\\::'Add and remove Zypper repositories'
)

local alt_modules
alt_modules=(
  campfire\\::'Send a message to Campfire'
  cloudformation\\::'create a AWS CloudFormation stack'
  composer\\::'Dependency Manager for PHP'
  debconf\\::'Configure a .deb package'
  digital_ocean\\::'Create/delete a droplet/SSH_key in DigitalOcean'
  digital_ocean_domain\\::'Create/delete a DNS record in DigitalOcean'
  digital_ocean_sshkey\\::'Create/delete an SSH key in DigitalOcean'
  django_manage\\::'Manages a Django application.'
  dnsimple\\::'Interface with dnsimple.com (a DNS hosting service).'
  dnsmadeeasy\\::'Interface with dnsmadeeasy.com (a DNS hosting service).'
  ejabberd_user\\::'Manages users for ejabberd servers'
  elasticache\\::'Manage cache clusters in Amazon Elasticache.'
  fireball\\::'Enable fireball mode on remote node'
  flowdock\\::'Send a message to a flowdock'
  github_hooks\\::'Manages github service hooks.'
  glance_image\\::'Add/Delete images from glance'
  group_by\\::'Create Ansible groups based on facts'
  grove\\::'Sends a notification to a grove.io channel'
  hipchat\\::'Send a message to hipchat'
  homebrew_cask\\::'Install/uninstall homebrew casks.'
  homebrew_tap\\::'Tap a Homebrew repository.'
  jboss\\::'deploy applications to JBoss'
  jira\\::'create and modify issues in a JIRA instance'
  kernel_blacklist\\::'Blacklist kernel modules'
  keystone_user\\::'Manage OpenStack Identity (keystone) users, tenants and rol...'
  layman\\::'Manage Gentoo overlays'
  librato_annotation\\::'create an annotation in librato'
  linode\\::'create / delete / stop / restart an instance in Linode Publ...'
  lldp\\::'get details reported by lldp'
  locale_gen\\::'Creates or removes locales.'
  logentries\\::'Module for tracking logs via logentries.com'
  lvg\\::'Configure LVM volume groups'
  lvol\\::'Configure LVM logical volumes'
  mqtt\\::'Publish a message on an MQTT topic for the IoT'
  netscaler\\::'Manages Citrix NetScaler entities'
  newrelic_deployment\\::'Notify newrelic about app deployments'
  nexmo\\::'Send a SMS via nexmo'
  nova_compute\\::'Create/Delete VMs from OpenStack'
  nova_keypair\\::'Add/Delete key pair from nova'
  open_iscsi\\::'Manage iscsi targets with open-iscsi'
  openvswitch_bridge\\::'Manage Open vSwitch bridges'
  openvswitch_port\\::'Manage Open vSwitch ports'
  opkg\\::'Package manager for OpenWrt'
  osx_say\\::'Makes an OSX computer to speak.'
  ovirt\\::'oVirt/RHEV platform management'
  pagerduty\\::'Create PagerDuty maintenance windows'
  rabbitmq_plugin\\::'Adds or removes plugins to RabbitMQ'
  rabbitmq_policy\\::'Manage the state of policies in RabbitMQ.'
  rabbitmq_user\\::'Adds or removes users to RabbitMQ'
  rabbitmq_vhost\\::'Manage the state of a virtual host in RabbitMQ'
  rds\\::'create, delete, or modify an Amazon rds instance'
  rds_param_group\\::'manage RDS parameter groups'
  rds_subnet_group\\::'manage RDS database subnet groups'
  redhat_subscription\\::'Manage Red Hat Network registration and subscriptions using...'
  rhn_channel\\::'Adds or removes Red Hat software channels'
  rhn_register\\::'Manage Red Hat Network registration using the rhnreg_ks c...'
  rollbar_deployment\\::'Notify Rollbar about app deployments'
  rpm_key\\::'Adds or removes a gpg key from the rpm db'
  stackdriver\\::'Send code deploy and annotation events to stackdriver'
  svr4pkg\\::'Manage Solaris SVR4 packages'
  swdepot\\::'Manage packages with swdepot package manager (HP-UX)'
  twilio\\::'Sends a text message to a mobile phone through Twilio.'
  typetalk\\::'Send a message to typetalk'
  ufw\\::'Manage firewall with UFW'
  urpmi\\::'Urpmi manager'
  vsphere_guest\\::'Create/delete/manage a guest VM through VMware vSphere.'
  zabbix_maintenance\\::'Create Zabbix maintenance windows'
)


local fontdir
fontdir=$(_call_program path toilet -I2 2>/dev/null)

local anshosts
_dohosts() {
  info
  anshosts=( $(grep -P '^\[[a-z0-9-]+\]' $ANSIBLE_HOSTS |sed 's/[[]//' |sed 's/[]]//') )
  _wanted ansible-hosts-group expl "hosts group" compadd -a anshosts
}

info() { print CURRENT:$CURRENT words3:$words[3] buffer:$BUFFERÂ« >/dev/pts/0 }

_domods() {
  info
  # ansmods=( yum:'so yummy' copy:'so copppy' file:'smth with file' template:'dfjk djf' git:'git stuff' gem:'gem stuff' )
  _describe -t ansible-modules 'ansible module' ansmods && ret=0
  # _wanted ansmods expl "modules" compadd -a ansmods
}

local modargs
_doargs() {
  info
  print -- ansargs: $ansargs[1] end >/dev/pts/0
  print -- words3:$words[3]end >/dev/pts/0
  # ansargs=( $(ansible-doc -s ${words[3]/:/} |awk '/^    / {print $1}') )
  # ansargs=( $( ansible-doc -s yum |sed "s/['\`\"]//g" |awk -F ' +# ' '/^    / {gsub(/^ +/,""); printf "%s:\"%s\"\n", $1, $2 }' ) )
  # ansargs=( "${(@f)$(ansible-doc -s yum |sed "s/['\`\"]//g" |awk -F ' +# ' '/^    / {gsub(/^ +/,""); printf "%s:\"%s\"\n", $1, $2 }')}" )
  # ansargs=( "${(@f)$(ansible-doc -s yum |sed "s/['\`\"]//g" |awk -F ' +# ' '/^    / {gsub(/^ +/,""); printf "%s=:%s\n", $1, $2 }')}" )
  foo=(zz xx)
  ansargs=( "${(@f)$(ansible-doc -s ${words[3]/:/} |sed "s/['\`\":]//g" |awk -F ' +# ' '/^    / {gsub(/^ +/,""); if ($1 ~ /=$/) {printf "%s:[#REQUIRED#] %s\n", $1, $2;} else printf "%s=:%s\n", $1, $2 }')}" )
  #print -- ansible-doc -s ${words[3]/:/} foo >/dev/pts/0
  _describe -t ansible-args 'module arguments' ansargs && ret=0
}

typeset -A opt_args
local opts
local context state line
opts=(
  -u'[connect as this user]:remote_user'
  -U'[desired sudo user (default=root)]:sudo_user'
  -s'[run operations with sudo (nopasswd)]'
  -S'[run operations with su]'
  -R'[run operations with su as this user (default=root)]:su_user'
  -k'[ask for SSH password]'
  -K'[ask for sudo password]'
  -i'[specify inventory host file (default=hosts)]:inventory'
  -l'[further limit selected hosts to an additional pattern]:subset'
  -B'[run asynchronously, failing after X seconds]:seconds'
  -c'[connection type to use (default=smart)]:connection'
  -f'[specify number of parallel processes to use (default=5)]:forks'
  -M'[specify path(s) to module library (default=None)]:module_path'
  -P'[set the poll interval if using -B (default=15)]:poll_interval'
  -T'[override the SSH timeout in seconds (default=10)]:timeout'
  -t'[log output to this directory]:tree'
  -C'[dont make any changes]'
  -o'[condense output]'
  -v'[verbose mode (-vvv for more, -vvvv to enable connection debugging)]'
  -h'[show this help message and exit]'
  '1:some host spec:_dohosts'
  '2:some modules foo_bar:_domods'
  '3:args:_doargs'
  '4:args:_doargs'
  '5:args:_doargs'
  '6:args:_doargs'
  '7:args:_doargs'
)

case $state in
  (mods)
    print $fontdir
    print IN CASE STATE: ansmods: $ansmods end >/dev/pts/0
    ret=$ansmods && return 0;;
    # _files -g '*.md' && return 0;;
esac

# _files -g '*.md' && return 0

_arguments -s -S $opts && return 0

# print 'in _ans, state Â«' $state 'Â» end' >/dev/pts/0
